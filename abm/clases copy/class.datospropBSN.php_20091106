<?php
/**
 * Clase Propia para la definicion de la logica de negocios.
 * Utiliza dos variables propias de la clase que las hereda llamadas
 * 		"clase" que define la base del nombre, debe tener la Primer letra en Mayuscula y responder a la base de los nombres
 * 					de los metodos propios.
 * 		"objeto" que define el nombre del objeto tipo de la clase, cuyo nombre debe ser igual al de la 
 * 					clase pero todo en minuscula
 * 
 * En la clase derivada se deben definir metodos que ejecuten
 * 		getId		-> Retorna el Id de la clase
 * 		getClave	-> Retorna la Clave de la clase
 * 
 *
 * Ejemplo del uso del retorno de la clase para el armado de un metodo de la clase derivada. 
 * 	public function muestra(){
 *		$var='muestra'.$this->getClase();
 *		$this->{$var}();
 *	}
 */
include_once("generic_class/class.PGDAO.php");
include_once("generic_class/class.BSN.php");
include_once("generic_class/class.maper.php");
include_once("clases/class.datosprop.php");
include_once("clases/class.datospropPGDAO.php");


class DatospropBSN extends BSN {
	
	protected $clase = "Datosprop";
	protected $nombreId = "Id_prop_carac";
	protected $datosprop;

	
	public function __construct($_Id_prop_carac=0,$_datosprop=''){
		DatospropBSN::seteaMapa();
		if ($_Id_prop_carac  instanceof Datosprop ){
			DatospropBSN::creaObjeto();
			DatospropBSN::seteaBSN($_Id_prop_carac);
		} else {
			if (is_numeric($_Id_prop_carac)){
				DatospropBSN::creaObjeto();
				if($_Id_prop_carac!=0){
					DatospropBSN::cargaById($_Id_prop_carac);
				}
			}
		}	

	}
	
/**
 * retorna el ID del objeto 
 *
 * @return id del objeto
 */
	public function getId(){
		return $this->datosprop->getId_prop_carac();
	}
	
/**
 * Setea e ID del objeto
 *
 * @param unknown_type $id
 */
	public function setId($id){
		$this->datosprop->setId_prop_carac($id);
	}

	public function grabaCaracteristica_Prop($id_prop,$arrayCarac){
		$datos = new Datosprop();
		$datos->setId_prop($id_prop);
		$datosBSN = new DatospropBSN($datos);
		$retorno=$datosBSN->borraDB();
		if($retorno){
			$claves=array_keys($arrayCarac);
			foreach ($claves as $id_carac){
				$datos->setId_carac($id_carac);
				$datos->setContenido($arrayCarac[$id_carac]['contenido']);
				$datos->setComentario($arrayCarac[$id_carac]['comentario']);
				$datosBSN->seteaBSN($datos);
				$retorno=$datosBSN->insertaDB();			
				if(!$retorno){
					break;
				}
			}
		}
		return $retorno;
	}

}

?>